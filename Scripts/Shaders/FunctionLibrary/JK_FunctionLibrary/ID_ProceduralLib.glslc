#version 330

////////////////////////////////////////////////////////////////////////////////
// Mari Ideascale Procedural Library
// Copyright (c) 2013 Jens Kafitz. All Rights Reserved.
//////////////////////////////////////////////////////////////////////////////// 
// File: ID_ProceduralLib.glslh 
// Description: Procedural library for various procedural functions.
////////////////////////////////////////////////////////////////////////////////                
// Author: Jens Kafitz | Mari Ideascale
// Web: www.campi3d.com      
// Web: www.mari.ideascale.com         
// Email: info@campi3d.com
////////////////////////////////////////////////////////////////////////////////                                          
// Date: Dec 20, 2013
////////////////////////////////////////////////////////////////////////////////
// This program is free software: you can redistribute it and/or modify   
// it under the terms of the GNU General Public License as published by   
// the Free Software Foundation, either version 3 of the License, or    
// (at your option) any later version.                    
//                                      
// This program is distributed in the hope that it will be useful,      
// but WITHOUT ANY WARRANTY; without even the implied warranty of     
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      
// GNU General Public License for more details.               
//                                      
// You should have received a copy of the GNU General Public License    
// along with this program.  If not, see <http://www.gnu.org/licenses/>.  
////////////////////////////////////////////////////////////////////////////////

// forward declarations from other include functions
//
// perlin noise
float Perlin3D( vec3 P );
// simplex noise
float SimplexPerlin3D(vec3 P);
// rgb to hsv
vec4 mriRgb2Hsv(vec4 colorIn);
// hsv to rgb
vec4 mriHsv2Rgb(vec4 colorIn);

// box filtered step function 
// the boxstep function is somewhere between step and smoothstep. 
// it is the result of the convolution of a box filter with a step edge. 
float boxStep(float low, float high, float value)
{
	float tmp = (value - low) / (high -  low);
	float clmp = clamp(tmp,0.0,1.0);
	return clmp;
}

// smooth function
float rsmooth(float x, float a_n, float b_n)
{
	float _smooth = smoothstep(0.0,1.0,x);
	_smooth *= mix(mix(smoothstep(-a_n-1.0, -a_n, -x), boxStep(-a_n-1.0,-a_n, -x), b_n),
			 mix(boxStep(-a_n-2.0,-a_n-1.0,-x), smoothstep(-a_n-2.0,-a_n-1.0,-x),b_n),b_n);
	return _smooth;
}

// frequency smoothing function
float freqSmooth(float d, float x, float a_n, float b_n)
{
	float tmp = floor(x)-mod(x,1.0);
	float tmp_n = rsmooth(tmp+1.0,a_n,b_n)*pow(d,tmp);
	return tmp_n;
}

//   soft threshold float,vec4
//   inputs: 
//   value/color    input to compute
//   threshold      the pivot value
//   bound          a value that is added and subtracted from the pivot
//threshold function for the given float value with a feather value
float softThreshold(float threshold, float bound, float value)
{
	float bounds = bound;
	float edgeH = threshold + bounds;
	float edgeL = threshold - bounds;

	float result = smoothstep(edgeL,edgeH,value);

	return result;
}

// threshold function for the given vec4 with a feather value
vec4 softThreshold(float threshold, float bound, vec4 colorInput)
{
	vec4 colThreshold = vec4(threshold,threshold,threshold,1.0);
	vec4 bounds = vec4(bound,bound,bound,1.0);
	vec4 edgeH = colThreshold + bounds;
	vec4 edgeL = colThreshold - bounds;
	vec4 value = mriRgb2Hsv(colorInput);
	value = vec4(value.r,0,value.b,1);
	value = mriHsv2Rgb(value);

	vec4 result = smoothstep(edgeL,edgeH,value);
	vec4 resultAlpha = vec4(result.r,result.g,result.b,1.0);
	return resultAlpha;
}

// remap function for float
float remap(float value, float oldMin, float oldMax, float newMin, float newMax, float multiplier)
{ 
	float old = (value - oldMin) / (oldMax - oldMin);
	float new = ((newMax - newMin) * old) + newMin ;
	float scale = (new * multiplier);
	return scale;
}

// remap function for color vec4 (color with alpha)
vec4 remap(vec4 value, float oldMin, float oldMax, float newMin, float newMax, float multiplier)
{
	vec4 old = (value - oldMin) / (oldMax - oldMin);
	vec4 new = ((newMax - newMin) * old) + newMin ;
	vec4 scale = vec4(new * multiplier);
	return scale;
}

// remap function for color vec3
vec3 remap(vec3 value, float oldMin, float oldMax, float newMin, float newMax, float multiplier)
{
	vec3 old = (value - oldMin) / (oldMax - oldMin);
	vec3 new = ((newMax - newMin) * old) + newMin ;
	vec3 scale = vec3(new * multiplier);
	return scale;
}

// -----------------------------------------------------------------------------
// based on noises.h by larry gritz, advanced renderman

// vsnoise(P) - vector-valued perlin noise on 3-d domain.
float vsnoise(vec3 P)
{
	float tmp = (2.0 * (Perlin3D(P)) - 1.0);
	return tmp;
}

// the stuff that ken musgrave calls "vlnoise"
float vlnoise (vec3 P, float scale)
{
	float tmp = (Perlin3D(vsnoise(P)*scale+P)) ;
	return tmp;
}

// fbm inplementation
// very similar to smoothfbm but in-values are not post-processed as much
float rmfBm (vec3 P, float octaves, float lacunarity, float gain, float amp, float freqOffset)
{
	vec3 pp = P;
	float sum = 0.0;
	float i;
	float o1_n = floor(octaves);
	float o2_n = mod(octaves,1.0);
	float mo = mod(freqOffset,1.0);
	float lac;
	
	float amp_n = 1.0;
	for ( i = 0.0;  i < (o1_n+2.0);  i += 1.0) 
	{
		// amp_n = amp;
		amp_n = (freqSmooth(amp, i+mo, o1_n, o2_n)*gain); 
		pp *= lacunarity;
		sum += amp_n * SimplexPerlin3D(pp);
	}
	return sum;
}

// vlfbm - classic vector fbm
float vlfBm (vec3 P, float octaves, float lacunarity, float gain, float amp, float scale)
{
	vec3 pp = P;
	float sum = 0.0;
	float i;
	float a_n = floor(octaves);

	for (i = 0.0;  i < a_n;  i += 1.0) 
	{
		sum += amp * vlnoise(pp,scale);
		amp *= gain;  
		pp *= lacunarity;
	}
	return sum;
}

// smoothed fbm inplementation
// most incoming values are smoothed so this function is suitable for non-constant in-values.
float smoothfBm (vec3 P, float octaves, float lacunarity, float gain, float amp, float freqOffset)
{
	vec3 pp = P;
	float sum = 0.0;
	float i;
	float o1_n = floor(octaves);
	float o2_n = mod(octaves,1.0);
	float _freqOffset = rsmooth(abs(freqOffset),0.0,1.0);
	float mo = mod(_freqOffset,1.0);
	float lac;
	float amp_n = 1.0;

	for ( i = 0.0;  i < (o1_n+2.0);  i += 1.0) 
	{
		amp_n = (freqSmooth(amp, i+mo, o1_n, o2_n)*gain);
		pp += freqSmooth(lacunarity, i+mo, o1_n, o2_n);  
		pp *= lacunarity;
		sum += amp_n * SimplexPerlin3D(pp);
	}
	return sum;
}

// smoothvlfBm
// most incoming values are smoothed so this function is suitable for non-constant in-values.
float smoothVfBm (vec3 P, float octaves, float lacunarity, float gain, float amp, float scale, float freqOffset)
{
	vec3 pp = P;
	float sum = 0.0;
	float i;
	float o1_n = floor(octaves);
	float o2_n = mod(octaves,1.0);
	float _freqOffset = rsmooth(abs(freqOffset),0.0,1.0);
	float mo = mod(_freqOffset,1.0);
	
	// float lac;
	float amp_n = 1.0;
	for ( i = 0.0;  i < (o1_n+2.0);  i += 1.0) 
	{
		amp_n = (freqSmooth(amp, i+mo, o1_n, o2_n)*gain);
		pp += freqSmooth(lacunarity, i+mo, o1_n, o2_n);
		pp *= lacunarity;  
		sum += amp_n *vlnoise(pp,scale);
	}
	return sum;
}
