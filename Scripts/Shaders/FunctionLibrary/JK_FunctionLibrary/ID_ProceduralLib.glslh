////////////////////////////////////////////////////////////////////////////////
// Mari Ideascale Procedural Library
// Copyright (c) 2013 Jens Kafitz. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////
// File: ID_ProceduralLib.glslh
// Description: Procedural library for various procedural functions.
////////////////////////////////////////////////////////////////////////////////
// Author: Jens Kafitz | Mari Ideascale
// Web: www.campi3d.com
// Web: www.mari.ideascale.com
// Email: info@campi3d.com
////////////////////////////////////////////////////////////////////////////////
// Modified Date: June 14, 2014
////////////////////////////////////////////////////////////////////////////////
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
// IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF HE POSSIBILITY OF SUCH DAMAGE.
////////////////////////////////////////////////////////////////////////////////

// the boxStep function is somewhere between step and smoothstep. it is the
// result of the convolution of a box filter with a step edge.
float boxStep(float low, float high, float value);

// smooth function using a combination of smoothstep and boxStep
float rsmooth(float x, float a_n, float b_n);

// frequency smooth function using combination of smoothstep and boxStep to smooth out noise frequencies.
float freqSmooth(float d, float x, float a_n, float b_n);

// threshold function for the givin float value with a feather value
float softThreshold(float threshold, float bound, float value);

// threshold function for the givin vec4 with a feather value
vec4 softThreshold(float threshold, float bound, vec4 value);

// remap function for float
float remap(float value, float oldMin, float oldMax, float newMin, float newMax, float multiplier);

// remap function for color vec4 (color with alpha)
vec4 remap(vec4 value, vec4 oldMin, vec4 oldMax, vec4 newMin, vec4 newMax, vec4 multiplier);

// remap function for color vec3
vec3 remap(vec3 value, vec3 oldMin, vec3 oldMax, vec3 newMin, vec3 newMax, vec3 multiplier);

// vsnoise(p) - vector-valued perlin noise on a 3-d domain.
float vsnoise(vec3 P);

// the stuff that ken musgrave calls "vlnoise"
float vlnoise (vec3 P, float scale);

// a variation of fbm without hardcoded values and added functionality
float rmfBm (vec3 P, float octaves, float lacunarity, float gain, float amp, float freqOffset);

// a variation of vector fbm, generally with better performance but different results than smoothvfbm
float vlfBm (vec3 P, float octaves, float lacunarity, float gain, float amp, float scale);

// a variation of fbm without hardcoded values and added functionality
// most incoming values are smoothed so this function is suitable for non-constant in-values.
float smoothfBm (vec3 P, float octaves, float lacunarity, float gain, float amp, float freqOffset);

// a variation of vector fbm without hardcoded values and added functionality
// most incoming values are smoothed so this function is suitable for non-constant in-values.
float smoothVfBm (vec3 P, float octaves, float lacunarity, float gain, float amp, float scale, float freqOffset);

// compute the uv rotation matrix
mat2 nb_uvRotation(float angle);

// patchcoord
// returns one offset coordinate per patch/udim
// useful for example to set pivots per patch
// x and y represent offsets from the default coordinate (lower left corner of each patch)
// uvcoord should be state.uv
vec2 patchCoord(vec2 uvCoord, float x, float y);

// patchrotate
// rotates the uvs per patch, feed in state.uv ( no fract() )
// pivotu and pivotv can be used to set rotational pivot on a patch (corner, center)
vec2 patchRotate(vec2 uvCoord, float angle, float pivotU, float pivotV);

// relUVTransform
// performs all uv transformation based on a pivot defined per udim
vec2 relUVTransform(vec2 uvCoord, float RotationAngle, vec2 Offset, vec2 Repeat, float pivotU, float pivotV);
