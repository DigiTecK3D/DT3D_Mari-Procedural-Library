////////////////////////////////////////////////////////////////////////////////
// DigiTecK3D Procedural Shader Library
// Copyright (c) 2013 DigiTecK3D. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////
// File: ProceduralLib.glslh
// Description: Procedural library for various procedural functions.
////////////////////////////////////////////////////////////////////////////////
// Author: Miguel A Santiago Jr.
// Web: www.digiteck3d.com
// Email: miguel@digiteck3d.com
////////////////////////////////////////////////////////////////////////////////
// Modified Date: June 14, 2014
////////////////////////////////////////////////////////////////////////////////
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
// IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF HE POSSIBILITY OF SUCH DAMAGE.
////////////////////////////////////////////////////////////////////////////////

// translate the position point in xyz
vec3 translate( vec3 P, vec3 trans);

// build a rotation matrix in the
// desired axis to multiply the position point
mat3 rotation(float angle, vec3 axis);

// scale the position point in xyz
vec3 scale( vec3 P, vec3 scale);

// tranform the position with translate,scale,rotation
vec3 positionTransform(vec3 P, vec3 Trans, vec3 Rot, vec3 Scale);

// bias function on a givin value
float pxslBias( float bias, float value );

// gain function on a givin value
float pxslGain( float gain, float value );

// threshold function for the givin value
float pxslThreshold(float threshold, float value);

// a anti-aliased version of step for procedurals
// 'threshold' is constant , 'value' is smoothly varying
//float aastep(float threshold , float value);

// vector noise function range of -1.0->1.0
vec3 vnoise(vec3 P);

// fractional Brownian motion
// Inputs:
// p              position and approximate inter-pixel spacing
// octaves        max # of octaves to calculate
// lacunarity     frequency spacing between successive octaves
// gain           scaling factor between successive octaves
//
float fBm(vec3 p, int octaves, float lacunarity, float gain);

// turbulence
// Inputs:
// p              position and approximate inter-pixel spacing
// octaves        max # of octaves to calculate
// lacunarity     frequency spacing between successive octaves
// gain           scaling factor between successive octaves
//
float turbulence(vec3 p, int octaves, float lacunarity, float gain);

// inigo multi-fractal
// Inputs:
// p              position and approximate inter-pixel spacing
// octaves        max # of octaves to calculate
// lacunarity     frequency spacing between successive octaves
// gain           scaling factor between successive octaves
//
float iqmf(vec3 p, int octaves, float lacunarity, float gain);

// ridged multi-fractal
// Inputs:
// p              position and approximate inter-pixel spacing
// octaves        max # of octaves to calculate
// lacunarity     frequency spacing between successive octaves
// gain           scaling factor between successive octaves
// offset         a factor to offset the octaves
//
float ridgedmf(vec3 p, int octaves, float lacunarity, float gain, float offset);

// perlin noise
vec4 DT3D_PerlinNoise(vec3 Po, vec4 colorA, vec4 colorB, float frequency, float threshold, bool invert, int unsign, int modSet);

// brownian fractal noise
vec4 DT3D_fBmNoise(vec3 Po, vec4 colorA, vec4 colorB, float frequency, int octaves, float lacunarity, float gain, float threshold, bool invert);

// turbulence fractal noise
vec4 DT3D_TurbNoise(vec3 Po, vec4 colorA, vec4 colorB, float frequency, int octaves, float lacunarity, float gain, float threshold, bool invert);

// inigo multi fractal noise
vec4 DT3D_InigoNoise(vec3 Po, vec4 colorA, vec4 colorB, float frequency, int octaves, float lacunarity, float gain, float threshold, bool invert);

// ridged multi fractal noise
vec4 DT3D_RidgedNoise(vec3 Po, vec4 colorA, vec4 colorB, float frequency, int octaves, float lacunarity, float gain, float offset, float threshold, bool invert);
