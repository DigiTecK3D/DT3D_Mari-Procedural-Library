<Node>
  <ID>DT3D_GaborNoise</ID>
   <Tags>
    <Tag>_adjustment</Tag>
  </Tags>
    <Inputs>
      <Input Name="Input" PreferredInput='1'/>
  	</Inputs>
    <Attributes>
		<Attribute Name="colorA" PrettyName="Color A" Group="Color" Type="color" Min="(0,0,0,1)" Max="(1,1,1,1)">(0,0,0,1)</Attribute>
		<Attribute Name="colorB" PrettyName="Color B" Group="Color" Type="color" Min="(0,0,0,1)" Max="(1,1,1,1)">(1,1,1,1)</Attribute>
		<Attribute Name="frequency" PrettyName="Frequency" Group="Scale" Type="float" Min="1" Max="10" Logarithmic="1">2</Attribute>
        <Attribute Name="Seed" PrettyName="Seed" Group="Scale" Type="double" Min="1" Max="100000" Logarithmic="1">1</Attribute> 
        <Attribute Name="UseFlow" PrettyName="Use painted Flow" Group="Direction" Type="bool" Min="false" Max="true" Description="When on you can use Mari's Vector Brushes to paint direction" >false</Attribute>
       	<Attribute Name="dirX" PrettyName="Direction X" Group="Direction" Type="float" Min="0" Max="200">1</Attribute>
        <Attribute Name="dirY" PrettyName="Direction Y" Group="Direction" Type="float" Min="0" Max="200">0</Attribute>
        <Attribute Name="dirZ" PrettyName="Direction Z" Group="Direction" Type="float" Min="0" Max="200">0</Attribute>
		<Attribute Name="noiseType" PrettyName="Noise Type" Group="Modifiers" Type="stringlist">Isotropic,Anisotropic,Isotropic,Hybrid</Attribute>
		<Attribute Name="impulses" PrettyName="Impulses" Group="Modifiers" Type="float" Min="1.0" Max="60">32.0</Attribute>
		<Attribute Name="bandwidth" PrettyName="Bandwidth" Group="Modifiers" Type="float" Min="0.01" Max="10.0">2.0</Attribute>
        <Attribute Name="truncate" PrettyName="Truncate" Group="Modifiers" Type="float" Min="0.001" Max="0.9">0.01</Attribute>
		<Attribute Name="transX" PrettyName="TranslateX" Group="Transform" Type="float" Min="0" Max="100" Logarithmic="1">0</Attribute>
		<Attribute Name="transY" PrettyName="TranslateY" Group="Transform" Type="float" Min="0" Max="100" Logarithmic="1">0</Attribute>
		<Attribute Name="transZ" PrettyName="TranslateZ" Group="Transform" Type="float" Min="0" Max="100" Logarithmic="1">0</Attribute>
		<Attribute Name="rotateX" PrettyName="Rotate X" Group="Transform Rotate" Type="float" Min="0" Max="360" Logarithmic="1">0</Attribute>
		<Attribute Name="rotateY" PrettyName="Rotate Y" Group="Transform Rotate" Type="float" Min="0" Max="360" Logarithmic="1">0</Attribute>
		<Attribute Name="rotateZ" PrettyName="Rotate Z" Group="Transform Rotate" Type="float" Min="0" Max="360" Logarithmic="1">0</Attribute>
		<Attribute Name="scaleX" PrettyName="Scale X" Group="Transform Scale" Type="float" Min="0" Max="100" Logarithmic="1">1</Attribute>
		<Attribute Name="scaleY" PrettyName="Scale Y" Group="Transform Scale" Type="float" Min="0" Max="100" Logarithmic="1">1</Attribute>
		<Attribute Name="scaleZ" PrettyName="Scale Z" Group="Transform Scale" Type="float" Min="0" Max="100" Logarithmic="1">1</Attribute>
    </Attributes>
  <Contexts>
    <Context Type="GLSL">
        <Shader>
            <Inputs>
                <Input Name="Input"><Default>vec4(1,1,1,1)</Default></Input>
            </Inputs>
            <Body><![CDATA[

            // compensate for scene size by applying eponential growth
    		float freq_pow = (pow($frequency,$frequency)-1.0) + 0.01;

			// build the needed vector attributes for position transform, offset max growths exponentiall
			vec3 trans = (vec3($transX,$transY,$transZ)*freq_pow) + vec3($Seed);
			vec3 rotate = vec3($rotateX,$rotateY,$rotateZ);
			vec3 scale = vec3($scaleX,$scaleY,$scaleZ);
			
			// transform the position to translate,rotate,scale the position
			vec3 P = positionTransform(State.Position,trans,rotate,scale) / freq_pow;
			
			// grab our anisotropic direction
			vec3 D = vec3($dirX,$dirY,$dirZ);

    		vec4 fullFlow = #Input;
    		vec3 flow = (fullFlow.rgb + vec3(-1.0)) + vec3(0.001);

			// Switches between attribute based direction and vector map based direction
			vec3 direction = mix(D,flow,float($UseFlow));  
	
			// gabor noise function
            Output = DT3D_GaborNoise(P,$colorA,$colorB,$frequency,direction,$bandwidth,$truncate,$impulses,1245,$noiseType);
		
            ]]></Body>
        </Shader>
    </Context>
  </Contexts>
</Node>
