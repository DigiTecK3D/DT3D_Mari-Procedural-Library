
////////////////////////////////////////////////////////////////////////////////
// MARI Procedural Library
// Copyright (c) 2013 Jens Kafitz. All Rights Reserved.
// mari.ideascale.com
//////////////////////////////////////////////////////////////////////////////// 
// File: ID_ProceduralLib.glslc  
// Description: Procedural library for various procedural functions.
////////////////////////////////////////////////////////////////////////////////                
// Author: Jens Kafitz        
// Web: www.campi3d.com        
// Email: info@campi3d.com
////////////////////////////////////////////////////////////////////////////////                                          
// Date: Dec 2, 2013             
////////////////////////////////////////////////////////////////////////////////
// This program is free software: you can redistribute it and/or modify   
// it under the terms of the GNU General Public License as published by   
// the Free Software Foundation, either version 3 of the License, or    
// (at your option) any later version.                    
//                                      
// This program is distributed in the hope that it will be useful,      
// but WITHOUT ANY WARRANTY; without even the implied warranty of     
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      
// GNU General Public License for more details.               
//                                      
// You should have received a copy of the GNU General Public License    
// along with this program.  If not, see <http://www.gnu.org/licenses/>.  
////////////////////////////////////////////////////////////////////////////////



#version 150
//! include | Comp.glslh

//--------------------------------------------------------------------------------------------------------
// Forward Declarations from other files
//--------------------------------------------------------------------------------------------------------

// gpuNoiseLib.glslc
float Perlin3D( vec3 P );
float SimplexPerlin3D(vec3 P);



//--------------------------------------------------------------------------------------------------------
// Box filtered Step function 
// The boxstep function is somewhere between step and smoothstep. It is the result of the convolution of a box filter with a step edge. 
//--------------------------------------------------------------------------------------------------------


float boxStep(float low, float high, float value)
{
 float tmp = (value - low) / (high -  low);
 float clmp = clamp(tmp,0.0,1.0);
 return clmp;

}

//--------------------------------------------------------------------------------------------------------
// Smooth function
//--------------------------------------------------------------------------------------------------------


float rsmooth(float x, float a_n, float b_n)
{
  float _smooth = smoothstep(0.0,1.0,x);
  _smooth *= mix(mix(smoothstep(-a_n-1.0, -a_n, -x), boxStep(-a_n-1.0,-a_n, -x), b_n),
             mix(boxStep(-a_n-2.0,-a_n-1.0,-x), smoothstep(-a_n-2.0,-a_n-1.0,-x),b_n),b_n);
  return _smooth;
}


//--------------------------------------------------------------------------------------------------------
// Frequency Smoothing function
//--------------------------------------------------------------------------------------------------------


float FreqSmooth(float d, float x, float a_n, float b_n)
{
  float tmp = floor(x)-mod(x,1.0);
  float tmp_n = rsmooth(tmp+1.0,a_n,b_n)*pow(d,tmp);
  return tmp_n;
}



//--------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------



// -----------------------------------------------------------
//
//
// Based on noises.h by Larry Gritz, Advanced Renderman
//
//
// -----------------------------------------------------------


// -----------------------------------------------------------
//   vsnoise(p) - vector-valued Perlin noise on 3-D domain.
// -----------------------------------------------------------


float vsnoise(vec3 p)
{
float tmp = (2.0 * (Perlin3D(p)) - 1.0);
return tmp;
}



// -----------------------------------------------------------
// The stuff that Ken Musgrave calls "VLNoise"
// -----------------------------------------------------------

float VLNoise (vec3 Pt, float scale) {

float tmp = (Perlin3D(vsnoise(Pt)*scale+Pt)) ;
return tmp;

}




// -----------------------------------------------------------
// VLfbm
// -----------------------------------------------------------

float VLfBm (vec3 P, float octaves, float lacunarity, float gain, float amp, float scale)
{

    vec3 pp = P;
    float sum = 0.0;
    float i;
    float a_n = floor(octaves);
    
    for (i = 0.0;  i < a_n;  i += 1.0) {



  sum += amp * VLNoise(pp,scale);
  amp *= gain;  
  pp *= lacunarity;

    }

    return sum;
}




// -----------------------------------------------------------
// rmVLfbm
// -----------------------------------------------------------


float rmVfBm (vec3 P, float octaves, float lacunarity, float gain, float amp, float scale, float freqOffset)
{
    
    vec3 pp = P;
    float sum = 0.0;
    float i;
    float o1_n = floor(octaves);
    float o2_n = mod(octaves,1.0);
    float mo = mod(freqOffset,1.0);

    // float lac;
    float amp_n = 1.0;

       

    for ( i = 0.0;  i < (o1_n+2.0);  i += 1.0) {

    amp_n = (FreqSmooth(amp, i+mo, o1_n, o2_n)*gain);
    pp *= lacunarity;  
    sum += amp_n *VLNoise(pp,scale);
    
    }
    return sum;
}




// -----------------------------------------------------------
// Rendermanstyle FBM Inplementation
// Inputs: 
//    p              position
//    octaves        max  of octaves to calculate
//    lacunarity     frequency spacing between successive octaves
//    amp            scaling factor between successive octaves
//    gain           contrast between octaves
//    freqOffset     Frequency Offset
// -----------------------------------------------------------



float smoothfBm (vec3 P, float octaves, float lacunarity, float gain, float amp, float freqOffset)
{
    
    vec3 pp = P;
    float sum = 0.0;
    float i;
    float o1_n = floor(octaves);
    float o2_n = mod(octaves,1.0);
    float _freqOffset = rsmooth(abs(freqOffset),0,1);
    float mo = mod(_freqOffset,1.0);
    float lac;
    float amp_n = 1;

       

    for ( i = 0.0;  i < (o1_n+2.0);  i += 1.0) {
    amp_n = (FreqSmooth(amp, i+mo, o1_n, o2_n)*gain);
    pp += FreqSmooth(lacunarity, i+mo, o1_n, o2_n);  
    pp *= lacunarity;
    sum += amp_n * SimplexPerlin3D(pp);
    
    }
    return sum;
}

float rmfBm (vec3 P, float octaves, float lacunarity, float gain, float amp, float freqOffset)
{
    
    vec3 pp = P;
    float sum = 0.0;
    float i;
    float o1_n = floor(octaves);
    float o2_n = mod(octaves,1.0);
    float mo = mod(freqOffset,1.0);
    float lac;
    float amp_n = 1;

       

    for ( i = 0.0;  i < (o1_n+2.0);  i += 1.0) {

    // amp_n = amp;
    amp_n = (FreqSmooth(amp, i+mo, o1_n, o2_n)*gain); 
    pp *= lacunarity;
    sum += amp_n * SimplexPerlin3D(pp);
    
    }
    return sum;
}


// -----------------------------------------------------------
// Soft Threshold float,vec4
// Inputs: 
//    value/color    Input to compute
//    Threshold      The Pivot Value
//    Bound          A Value that is added and subtracted from the Pivot
// -----------------------------------------------------------



// threshold function for the given float value with a feather value
float softThreshold(float threshold, float bound, float value)
{
  float bounds = bound;
  float edgeH = threshold + bounds;
  float edgeL = threshold - bounds;

  float result = smoothstep(edgeL,edgeH,value);

  return result;
}


// threshold function for the given vec4 with a feather value
vec4 softThreshold(float threshold, float bound, vec4 colorInput)
{
  vec4 colThreshold = vec4(threshold,threshold,threshold,1.0);
  vec4 bounds = vec4(bound,bound,bound,1.0);
  vec4 edgeH = colThreshold + bounds;
  vec4 edgeL = colThreshold - bounds;
  vec4 input = mriRgb2Hsv(colorInput);
  input = vec4(input.r,0,input.b,1);
  input = mriHsv2Rgb(input);

  vec4 result = smoothstep(edgeL,edgeH,input);
  return result;
}

