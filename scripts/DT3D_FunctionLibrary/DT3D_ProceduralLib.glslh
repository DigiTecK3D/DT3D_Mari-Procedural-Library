////////////////////////////////////////////////////////////////////////////////
// DigiTecK3D Procedural Shader Library Registration
// Copyright (c) 2013 DigiTecK3D. All Rights Reserved.
//////////////////////////////////////////////////////////////////////////////// 
// File: ProceduralLib.glslh	
// Description: Procedural library for various procedural functions.
////////////////////////////////////////////////////////////////////////////////               	
// Author: Miguel A Santiago Jr.       	
// Web: www.digiteck3d.com				
// Email: miguel@digiteck3d.com
////////////////////////////////////////////////////////////////////////////////			                                   	
// Date: Oct 15, 2013	         		
////////////////////////////////////////////////////////////////////////////////
// This program is free software: you can redistribute it and/or modify		
// it under the terms of the GNU General Public License as published by		
// the Free Software Foundation, either version 3 of the License, or		
// (at your option) any later version.										
//																			
// This program is distributed in the hope that it will be useful,			
// but WITHOUT ANY WARRANTY; without even the implied warranty of			
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the			
// GNU General Public License for more details.								
//																			
// You should have received a copy of the GNU General Public License		
// along with this program.  If not, see <http://www.gnu.org/licenses/>.	
////////////////////////////////////////////////////////////////////////////////

// translate the position point in xyz
vec3 translate( vec3 P, vec3 trans);

// build a rotation matrix in the 
// desired axis to multiply the position point 
mat3 rotation(float angle, vec3 axis);

// scale the position point in xyz
vec3 scale( vec3 P, vec3 scale);

// tranform the position with translate,scale,rotation 
vec3 positionTransform(vec3 P, vec3 Trans, vec3 Rot, vec3 Scale);

// bias function on a givin value 
float pxslBias( float bias, float value );

// gain function on a givin value
float pxslGain( float gain, float value );

// threshold function for the givin value
float pxslThreshold(float threshold, float value);

// a anti-aliased version of step for procedurals  
// 'threshold' is constant , 'value' is smoothly varying
float aastep(float threshold , float value);

// vector noise function range of -1.0->1.0
vec3 vnoise(vec3 P);

// fractional Brownian motion
// Inputs: 
// p              position and approximate inter-pixel spacing
// octaves        max # of octaves to calculate
// lacunarity     frequency spacing between successive octaves
// gain           scaling factor between successive octaves
//
float fBm(vec3 p, int octaves = 4, float lacunarity = 2.0, float gain = 0.5);

// turbulence 
// Inputs: 
// p              position and approximate inter-pixel spacing
// octaves        max # of octaves to calculate
// lacunarity     frequency spacing between successive octaves
// gain           scaling factor between successive octaves
//
float turbulence(vec3 p, int octaves = 4, float lacunarity = 2.0, float gain = 0.5);

// inigo multi-fractal
// Inputs: 
// p              position and approximate inter-pixel spacing
// octaves        max # of octaves to calculate
// lacunarity     frequency spacing between successive octaves
// gain           scaling factor between successive octaves
//
float iqmf(vec3 p, int octaves = 4, float lacunarity = 2.0, float gain = 0.5);

// ridged multi-fractal
// Inputs: 
// p              position and approximate inter-pixel spacing
// octaves        max # of octaves to calculate
// lacunarity     frequency spacing between successive octaves
// gain           scaling factor between successive octaves
// offset         a factor to offset the octaves
//
float ridgedmf(vec3 p, int octaves = 4, float lacunarity = 2.0, float gain = 0.5, float offset = 1.0);

// perlin noise
vec4 DT3D_PerlinNoise(vec3 Po, vec4 colorA, vec4 colorB, float frequency, float threshold, bool invert, int unsign, int modSet);

// brownian fractal noise
vec4 DT3D_fBmNoise(vec3 Po, vec4 colorA, vec4 colorB, float frequency, int octaves, float lacunarity, float gain, float threshold, bool invert);

// turbulence fractal noise
vec4 DT3D_TurbNoise(vec3 Po, vec4 colorA, vec4 colorB, float frequency, int octaves, float lacunarity, float gain, float threshold, bool invert);

// inigo multi fractal noise
vec4 DT3D_InigoNoise(vec3 Po, vec4 colorA, vec4 colorB, float frequency, int octaves, float lacunarity, float gain, float threshold, bool invert);

// ridged multi fractal noise
vec4 DT3D_RidgedNoise(vec3 Po, vec4 colorA, vec4 colorB, float frequency, int octaves, float lacunarity, float gain, float offset, float threshold, bool invert);
